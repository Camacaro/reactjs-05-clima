{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","ref","id","type","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","name","weather","main","urlIcon","concat","icon","alt","temp","src","temp_max","temp_min","App","state","error","consulta","consultarApi","_this$state$consulta","url","console","log","fetch","then","resp","json","datos","setState","catch","prevProps","prevState","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56f60541.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = (props)=>{\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <header>\r\n                    <div className=\"nav-wrapper light-blue darken-2\">\r\n                        <a className=\"brand-logo\"> {props.titulo} </a>\r\n                    </div>\r\n                </header>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n\r\n    /**\r\n     * Crear Ref\r\n     */\r\n    ciudadRef = React.createRef();\r\n    paisRef   = React.createRef();\r\n\r\n\r\n    /**\r\n     * Funciion se ejecuta al enviar el formulario\r\n     */\r\n    buscarClima = (e) => {\r\n        e.preventDefault();\r\n\r\n        /**\r\n         * leer los ref y crear objeto\r\n         */\r\n        const respuesta = {\r\n            'ciudad':this.ciudadRef.current.value,\r\n            'pais':this.paisRef.current.value\r\n        }\r\n        //console.log(respuesta);\r\n\r\n        /**\r\n         * Enviar datos al padre por props, app.ja\r\n         */\r\n        this.props.datosConsulta(respuesta);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"contenedor-form\">\r\n\r\n                <div className=\"container\">\r\n                \r\n                    <div className=\"row\">\r\n\r\n                        <form onSubmit={this.buscarClima}>\r\n\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <input ref={this.ciudadRef} id=\"ciudad\" type=\"text\" />\r\n                                <label htmlFor=\"ciudad\">Ciudad</label>\r\n                            </div>\r\n\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <select ref={this.paisRef}>\r\n                                    <option value=\"\" defaultValue> Elige un país </option>\r\n                                    <option value=\"AR\">Argentina</option>\r\n                                    <option value=\"CO\">Colombia</option>\r\n                                    <option value=\"CR\">Costa Rica</option>\r\n                                    <option value=\"ES\">España</option>\r\n                                    <option value=\"US\">Estados Unidos</option>\r\n                                    <option value=\"MX\">Mexico</option>\r\n                                    <option value=\"PE\">Perú</option>\r\n                                </select>\r\n                                <label htmlFor=\"pais\">País</label>\r\n                            </div>\r\n\r\n                            <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\r\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar...\"/>\r\n                            </div>\r\n\r\n                        </form>\r\n\r\n                    </div>\r\n                \r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFormulario.propTypes = {\r\n    datosConsulta: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6  offset-m3\">\r\n                    <div className=\"card-panel red darken-4 error\">\r\n                        {props.mensaje}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Clima extends Component {\r\n    \r\n    mostrarResultado = () => {\r\n        /**\r\n         * Obtener los datos de la api\r\n         */\r\n        const {name, weather, main} = this.props.resultado;\r\n\r\n        if(!name || !weather || !main){\r\n            return null;\r\n        }\r\n\r\n        const urlIcon = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n        const alt = `clima de ${name}`;\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                \r\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n\r\n                    <div className=\"card-panel light-blue align-center\">\r\n\r\n                        <span className=\"white-text \">\r\n\r\n                            <h2>Resultado Climade de: {name} </h2>\r\n                            <p className=\"temperatura\">\r\n                                Actual: {main.temp} &deg;C\r\n                                <img src={urlIcon} alt={alt} />\r\n                            </p>\r\n                            <p> Max. {main.temp_max}</p>\r\n                            <p> Min. {main.temp_min}</p>\r\n\r\n                        </span>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"container\">\r\n                {this.mostrarResultado()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nClima.propTypes = {\r\n    resultado: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from './componentes/Error';\nimport Clima from './componentes/Clima';\n \n class App extends Component {\n\n\tstate = {\n\t\terror: '',\n\t\tconsulta: {},\n\t\tresultado: {}\n\t}\n\n\t/**\n\t * Al cargar el componente\n\t*/\n\tcomponentDidMount(){\n\t\tthis.setState({\n\t\t\terror:false\n\t\t});\n\t}\n\n\t/**\n\t * Se ejecuta al cambiar el coponente\n\t * este toma dos parametros que son los props y state anteriores antes de actualizarse\n\t */\n\tcomponentDidUpdate(prevProps, prevState){\n\t\t/**\n\t\t * Este componenete se actualiza constantemente debido a varios factores, por ello se ejecuta muchas veces\n\t\t * por ellos vamos a verificar que si el valor anterior es igual al actual no se ejecute la api si llega a cambiar qeu consulte la api\n\t\t */\n\t\tif(prevState.consulta !== this.state.consulta){\n\t\t\tthis.consultarApi();\n\t\t}\n\t\t\n\t}\n\n\t/**\n\t * Metodo para consultar la API del clima\n\t */\n\tconsultarApi = () => {\n\t\tconst {ciudad, pais} = this.state.consulta;\n\n\t\tif(!ciudad || !pais) return null;\n\n\t\tconst appId = '82179fee8a73c4e311ba9f97e285ec32';\n\t\t/**\n\t\t * &units=metric, es para ponerlo en centigrados\n\t\t */\n\t\tlet url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}&units=metric`;\n\t\tconsole.log(url);\n\n\t\t/**\n\t\t * Query con fetch api, fetch es de js ES6\n\t\t * Parametro recibe la url\n\t\t */\n\t\tfetch(url)\n\t\t\t.then( resp => {\n\t\t\t\t/**\n\t\t\t\t * ya que la respuesta viene en JSON, es lo que vamos a devovler\n\t\t\t\t */\n\t\t\t\treturn resp.json();\n\t\t\t})\n\t\t\t.then(datos => {\n\t\t\t\t//console.log(datos);\n\n\t\t\t\t/**\n\t\t\t\t * Almacenar los datos en el state\n\t\t\t\t */\n\t\t\t\tthis.setState({\n\t\t\t\t\tresultado: datos\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log(error);\n\t\t\t})\n\n\t\t /**\n\t\t  * Leer la url y agregar la API KEY \n\t\t  */\n\n\t\t  /**\n\t\t   * consultar fetch\n\t\t   */\n\n\t\tconsole.log(ciudad);\n\t}\n\n\n\t/**\n\t * Respuesta del formulario para llenar el state\n\t */\n\tdatosConsulta = (respuesta) => {\n\t\tif(respuesta.ciudad === '' || respuesta.pais === ''){\n\t\t\tthis.setState({\n\t\t\t\terror:true\n\t\t\t});\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\tconsulta:respuesta,\n\t\t\t\terror:false\n\t\t\t});\n\t\t}\n\t}\n\t\n\trender() {\n\n\t\tconst error = this.state.error;\n\n\t\tlet resultado;\n\n\t\tif(error){\n\t\t\tresultado = <Error mensaje=\"Ambos campos son requeridos\"/> \n\t\t}else{\n\t\t\tresultado = <Clima resultado={this.state.resultado}/>\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"app\">\n\t\n\t\t\t\t<Header\n\t\t\t\t\ttitulo=\"Clima Ract\"\n\t\t\t\t/>\n\n\t\t\t\t<Formulario\n\t\t\t\t\tdatosConsulta={this.datosConsulta}\n\t\t\t\t/>\n\n\t\t\t\t{resultado}\n\n\t\t\t</div>\n\t\t);\n\t}\n }\n \n export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}